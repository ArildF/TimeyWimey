@using TimeyWimey.Model
@using System.Text.Unicode
@using TimeyWimey.Infrastructure
@inject TimeLineCalculator _lineCalculator;
@inject MouseService _mouseService;

<svg height="200%" width="100%" class="px-1" @ref="SvgElement"
     @onmousemove=@(e => _mouseService.FireMove(this, e))
             @onmouseup=@(e => _mouseService.FireUp(this, e))
     >
@foreach (int halfHour in Enumerable.Range(0, 48))
{
    var time = TimeOnly.MinValue.AddHours(halfHour / 2.0);
    
    var y = _lineCalculator.HourVerticalPosition(time);
    var height = _lineCalculator.HourVerticalPosition(time.AddHours(0.5).ToTimeSpan()) - y;

    <rect y="@(y)%" height="@(height)%" width="100%" fill="lightgray" cursor="pointer" 
          class="align-content-stretch time-chunk" @onclick="async args => await CreateChunk(args, time)"/>
    @if (halfHour % 2 == 0)
    {
        <text>
            <text class="hour" x="0" y="@(y -0.1)%">@($"{halfHour / 2}:00")</text>
        </text>
    }
    @if (halfHour == 17)
    {
        <line stroke-width="0" x1="0" y1="0" x2="0" y2="0" @ref="HourMark" tabindex="0"/>
    }
    
    
    double width = halfHour % 2 == 0 ? 0.3 : 0.1;
    <line stroke="black" x1="0%" x2="100%" y1="@(y)%"
          y2="@(y)%" stroke-width="@(width)px"/>
    
}
<TimeEntriesDisplay Day="Day" SvgElement="SvgElement"/>

@if(Day?.Date == DateOnly.FromDateTime(DateTime.Today))
{
    <CurrentTimeLine/>
}
</svg>

@code {
    [Parameter]
    public Day? Day { get; set; }

    
    public ElementReference HourMark { get; set; }


    public ElementReference SvgElement { get; set; }

    private async Task CreateChunk(MouseEventArgs args, TimeOnly timeOnly)
    {
        if (Day == null)
        {
            return;
        }
        var timeEntry = new TimeEntry
        {
            Description = "Description",
            Title = "Some activity",
            Start = timeOnly,
            End = timeOnly.AddHours(0.5)
        };
        Day.Entries.Add(timeEntry);
    }

}
