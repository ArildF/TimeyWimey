@using TimeyWimey.Model
@using Microsoft.AspNetCore.Components.WebAssembly.Infrastructure
@using TimeyWimey.Data
@using MudBlazor
@inject DataPersistence _persistence;
@inject IJSRuntime _jsRuntime;
@inject NavigationManager _navigationManager;

@if (Days == null)
{
    <p>loading</p>
    return;
}

<div>
    <div style="display: flex; justify-content: flex-end; align-items: baseline; width: 100%; gap: 3em">
        <div> <MudDatePicker ShowWeekNumbers="true" Date="_weekOfDate" 
                             Placeholder="For week of"
                             DateChanged="DateChanged" FirstDayOfWeek="DayOfWeek.Monday"/></div>
        <MudButton Href="@ReportLink">Show report</MudButton>
        <MudCheckBox @bind-Checked="FiveDayWeek" Label="Five day week" Color="Color.Primary" />
    </div>

    <div class="flex-row d-flex" style="width: 100%">
        @foreach (var day in Days)
        {
            <div class="px-1 align-content-stretch" style="width: 100%">
                <h4 class="day-of-week">@day.DayOfWeek</h4>
                <p class="date">@day.Date.ToString("M")</p>
            </div>
        }
    </div>

    <div class="day-scrollable flex-row d-flex" style="height: 85vh; width: 100%" @ref="ScrollDiv">
        @foreach (var day in Days)
        {
                <DayDisplay Day="day"></DayDisplay>

        }
    </div>
</div>
@code {

    private Day[]? _days;

    private DateOnly _reportDay;

    private DateTime? _weekOfDate;

    private string ReportLink => $"WeekReport/{_reportDay.ToDateTime(TimeOnly.MinValue).ToString("s")}";
    private Day[]? Days => _fiveDayWeek ? _days?.Take(5).ToArray() : _days;

    public ElementReference ScrollDiv { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await LoadDays();
    }

    private async Task LoadDays()
    {
        _days = await _persistence.GetDaysForWeek(DateOnly.FromDateTime(_weekOfDate ?? DateTime.Now));
        _reportDay = _days.First().Date;
        _weekOfDate = _reportDay.ToDateTime(TimeOnly.MinValue);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // TODO: find a smarter/more dynamic way to do this.
            await _jsRuntime.InvokeVoidAsync("scrollElement", ScrollDiv, 0, 450);
        }
    }

    private bool _fiveDayWeek = true;

    private bool FiveDayWeek
    {
        get => _fiveDayWeek;
        set => _fiveDayWeek = value;
    }

    private async Task DateChanged(DateTime? obj)
    {
        _weekOfDate = obj;
        await LoadDays();
    }

}
