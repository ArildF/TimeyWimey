@using TimeyWimey.Model
@using TimeyWimey.Infrastructure
@inject TimeLineCalculator _lineCalculator;

@if (Day == null)
{
    return;
}

@{
var y = _lineCalculator.HourVerticalPosition(Entry.Start);
var height = _lineCalculator.HourVerticalPosition(Entry.End.ToTimeSpan()) - y;
var textPos = y + (height / 2);
var bottom = y + height;

<rect fill="lightgreen" y="@(y)%" x="0" height="@(height)%" width="100%" rx="12" ry="12">
</rect>
<text>
    <text x="50%" y="@(textPos)%" class="entryTitle" width="100%">@Entry.Title</text>
</text>
    <EntryTimeDraggable  @bind-Y="YTop" X="0" SvgElement="@SvgElement" @bind-YPercent="YPercentTop"
                         DragCompleted="TopDragCompleted">
    <rect fill="lightgreen" height="5px" width="100%" y="@(y)%"/>
    <rect fill="black" height="1px" width="100%" y="@(y)%"/>
</EntryTimeDraggable>
    <EntryTimeDraggable X="0" SvgElement="@SvgElement" @bind-Y="YBottom" @bind-YPercent="YPercentBottom"
                        DragCompleted="BottomDragCompleted">
    <rect fill="lightgreen" x="0" y = "@(bottom)%" height="5px" width="100%"/>A
    <rect fill="black" height="1px" width="100%" y="@(bottom)%"/>
</EntryTimeDraggable>
}

@code {
    [Parameter]
    public Day? Day { get; set; }

    [Parameter]
    public TimeEntry? Entry { get; set; }

    [Parameter]
    public ElementReference SvgElement { get; set; }

    public double YTop { get; set; }
    public double YBottom { get; set; }


    private double _yPercentTop;
    public double YPercentTop
    {
        get => _yPercentTop;
        set
        {
            _yPercentTop = value;
            var start = TimeOnly.FromTimeSpan(TimeSpan.FromMinutes(_yPercentTop * 0.01 * MinutesPerDay));
            if (Entry != null && Entry.Start != start)
            {
                Entry.Start = start;
                Console.WriteLine($"Entry start: {Entry.Start}");
                YTop = 0;
                StateHasChanged();
            }
        }
    }

    private double _yPercentBottom;
    public double YPercentBottom
    {
        get => _yPercentBottom;
        set
        {
            _yPercentBottom = value;

            var end = TimeOnly.FromTimeSpan(TimeSpan.FromMinutes(_yPercentBottom * 0.01 * MinutesPerDay));
            if (Entry != null && Entry.End != end)
            {
                Entry.End = end;
                Console.WriteLine($"Entry end: {Entry.End}");
                YBottom = 0;
                StateHasChanged();
            }
        }
    }


    private TimeOnly ClosestHalfHour(TimeOnly time)
    {
        var span = time.ToTimeSpan();
        var minutes = span.TotalMinutes;
        float multiple = 30;
        var roundedToHalfHour = (int)MathF.Round((float)minutes / multiple) * multiple;
        var timespan = TimeSpan.FromMinutes(roundedToHalfHour);
        var start = TimeOnly.FromTimeSpan(timespan);
        return start;
    }

    private void TopDragCompleted()
    {
        Entry!.Start = ClosestHalfHour(Entry.Start);
        var overlapping = Day!.Entries.FirstOrDefault(
            e => e.End > Entry.Start && e.Start < Entry.Start);
        if (overlapping != null)
        {
            Entry.Start = overlapping.End;
        }
    }

    private void BottomDragCompleted()
    {
        Entry!.End = ClosestHalfHour(Entry.End);
        var overlapping = Day!.Entries.FirstOrDefault(
            e => e.Start < Entry.End && e.End > Entry.End);
        if (overlapping != null)
        {
            Entry.End = overlapping.Start;
        }
    }

        private const int MinutesPerDay = 1440;
}