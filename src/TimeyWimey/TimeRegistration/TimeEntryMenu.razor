@using MudBlazor;
@using MudBlazor.Utilities
@using TimeyWimey.Data
@using TimeyWimey.Infrastructure
@using TimeyWimey.Model
@inject IDialogService _dialogService;
@inject DataPersistence _persistence;
@inject EventAggregator _aggregator;
@inject IJSRuntime _js;

@if(Entry == null)
{
    <p>Loading</p>
    return;
}

<MudMenu @ref="Menu">
    <ChildContent>
        <MudOverlay OnClick="@(async () => await Toggle())" Visible="true" ZIndex="-1"/>
        <div class="d-flex flex-column">
            <div class="d-flex flex-row" style="gap: 1em">
                <div class="d-flex flex-column" style="align-items: stretch">
                    <div class="flex-initial ml-1 pl-1">
                    <MudTextField Placeholder="Search" T="string" Value="_searchText"
                                  AutoFocus="true"
                                  Style="padding-left: 6px flex:0 1 auto"
                                  AdornmentIcon="@Icons.Filled.Search" DebounceInterval="500"
                                  ValueChanged="Search"/>
                    </div>

                    <MudMenuItem Class="ma-0 pa-0 ml-1 pl-1" OnClick="New">
                        <div style="font-weight: bold">New...</div>
                    </MudMenuItem>
                    @if (Entry.Activity != null)
                    {
                        <MudMenuItem Class="ma-0 pa-0 ml-1 pl-1" OnClick="Edit">
                            <div style="font-weight: bold">Edit '@Entry.Activity.Name'...</div></MudMenuItem>
                    }
                    @foreach (var activity in _filteredActivities!.Take(6))
                    {
                        <MudMenuItem Class="ma-0 pa-0 ml-1 pl-1" OnClick="async () => await SetActivity(activity)">
                            <div style="background: @activity.Color; color: @ColorHelper.CalculateForegroundTextColor(activity.Color)">
                                @activity.Name
                            </div>
                        </MudMenuItem>
                    }
                    <MudMenuItem Class="ma-0 pa-0 ml-1 pl-1" OnClick="ShowAll">
                        <div style="font-weight: bold">Show All...</div></MudMenuItem>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Secondary" OnClick="async () => await DeleteEntry(Entry!)"/>
                </div>
                <div class="d-flex flex-column">
                    <MudTextField @bind-Value="Entry.Title" Placeholder="@(Entry.Activity?.Name)" Label="Title" @onkeypress="OnKeyPress"/>
                    <MudTextField @bind-Value="Entry.Notes" Label="Notes" Lines="8" FullWidth="true"/>
                    <div class="d-flex flex-row">
                        <MudIconButton Icon="@Icons.Material.Filled.Save" Size="Size.Small" OnClick="async () => await Save()"></MudIconButton>
                        <MudIconButton Icon="@Icons.Material.Filled.Cancel" Size="Size.Small"></MudIconButton>
                    </div>
                </div>
            </div>
            <div class="d-flex flex-row">
            </div>
        </div>
        
    </ChildContent>
</MudMenu>
@code {
    private MudMenu? Menu { get; set; }

    [Parameter]
    public TimeEntry? Entry { get; set; }

    [Parameter]
    public Day? Day { get; set; }

    [Parameter]
    public EventCallback Committed { get; set; }

    private TimeActivity[]? _filteredActivities;

    private TimeActivity[]? _activities;


    private string? _searchText;


    public async ValueTask Toggle(MouseEventArgs? obj = default)
    {
        obj ??= new();

        var bounds = await _js.InvokeAsync<BoundingClientRect>("getWindowRect");

        const int estimatedOffset = 400;
        var horizontalStyle = obj.ClientX >= bounds.Width / 2 && obj.ClientX > bounds.Width - estimatedOffset
            ? $"margin-left: {bounds.Width - estimatedOffset}px;"
            : $"margin-left: {obj.ClientX}px;";
        var verticalStyle = obj.ClientY >= bounds.Height / 2 && obj.ClientY > bounds.Height - estimatedOffset
            ? $"margin-top: {bounds.Height - estimatedOffset}px;"
            : $"margin-top: {obj.ClientY}px;";

        Menu!.PopoverStyle = horizontalStyle + verticalStyle;

        _activities = await _persistence.GetActivities();
        _filteredActivities = _activities;
        Menu.ToggleMenu(obj);
    }

    private void Search(string term)
    {
        _searchText = term;
        _filteredActivities = _activities!.Where(a => 
            string.IsNullOrWhiteSpace(term) || 
            (a.Name?.Contains(term, StringComparison.InvariantCultureIgnoreCase) ?? false))
            .ToArray();
    }

    private async Task OnKeyPress(KeyboardEventArgs arg)
    {
        if (arg.Key == "Enter")
        {
            await Save();
            await Toggle(new MouseEventArgs());
        }
    }

    private async Task Save()
    {
        await Committed.InvokeAsync();
    }

    private async Task SetActivity(TimeActivity activity)
    {
        if (Entry != null && Day != null)
        {
            var existingActivity = Day.Entries
                .Where(e => e.Activity != null)
                .Select(e => e.Activity!)
                .FirstOrDefault(a => a.Id == activity.Id);
            var toAssign = existingActivity ?? activity;
            await AssignActivity(toAssign);
        }
    }

    private async Task AssignActivity(TimeActivity activity)
    {
        activity.LastUsed = DateTime.Now;
        Entry!.Activity = activity;
        await Committed.InvokeAsync();
    }


    private async Task New()
    {
        var random = new Random();
        int RandomByte() => random.Next(255);
        var activity = new TimeActivity
        {
            Name = _searchText ?? "",
            Color = new MudColor(RandomByte(), RandomByte(), RandomByte(), 255).ToString(MudColorOutputFormats.HexA),
            TimeCodes = new List<TimeCode>(),
        };
        await EditActivity(activity, "New activity");
    }

    private async Task Edit()
    {
        await EditActivity(Entry!.Activity!, "Edit activity");
        _aggregator.Publish(new TimeActivityUpdated(Entry.Activity!));
    }

    private async Task EditActivity(TimeActivity activity, string dialogTitle)
    {
        var parameters = new DialogParameters { { nameof(TimeActivityEditor.Activity), activity } };

        var options = new DialogOptions
        {
            CloseButton = true,
            DisableBackdropClick = false,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            Position = DialogPosition.Center,
        };

        var d = _dialogService.Show<TimeActivityEditor>(dialogTitle, parameters, options);
        var result = await d.Result;

        if (!result.Cancelled && (bool)result.Data)
        {
            await _persistence.Save(activity);
            await AssignActivity(activity);
        }
    }

    private async Task DeleteEntry(TimeEntry entry)
    {
        Day!.Entries.Remove(entry);
        await _persistence.Delete(entry);
        await Committed.InvokeAsync();
    }

    private async Task ShowAll()
    {
        var options = new DialogOptions
        {
            CloseButton = true,
            DisableBackdropClick = false,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            Position = DialogPosition.Center,
        };

        var d = _dialogService.Show<AllActivitiesDialog>("Select activity", 
            new DialogParameters(), options);

        var result = await d.Result;
        if (!result.Cancelled && result.Data is TimeActivity activity)
        {
            await AssignActivity(activity);
        }
    }

}


