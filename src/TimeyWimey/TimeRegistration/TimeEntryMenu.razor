@using MudBlazor;
@using MudBlazor.Utilities
@using TimeyWimey.Data
@using TimeyWimey.Model
@inject IDialogService _dialogService;
@inject DataPersistence _persistence;

<MudMenu @ref="Menu">
    <ChildContent>
        <MudTextField Placeholder="Search" Value="_searchText" Style="padding-left: 6px"
                      AdornmentIcon="@Icons.Filled.Search" DebounceInterval="500" ValueChanged="(string term) => Search(term)"/>

        <MudMenuItem OnClick="New">[New...]</MudMenuItem>
        @foreach (var activity in _filteredActivities)
        {
            <MudMenuItem OnClick="async () => await SetActivity(activity)">@activity.Name</MudMenuItem>
        }
    </ChildContent>
</MudMenu>
@code {
    private MudMenu Menu { get; set; }

    [Parameter]
    public TimeEntry? Entry { get; set; }

    [Parameter]
    public Day? Day { get; set; }

    [Parameter]
    public EventCallback Committed { get; set; }

    private TimeActivity[]? _filteredActivities;

    private TimeActivity[]? _activities; 

    protected override async Task OnInitializedAsync()
    {
        _activities = await _persistence.GetActivities();
        _filteredActivities = _activities;
    }

    public void Toggle(MouseEventArgs obj)
    {
        Menu.PopoverStyle = $"margin-top: {obj.ClientY}px; margin-left: {obj.ClientX}px";
        Menu.ToggleMenu(obj);
    }

    private void Search(string term)
    {
        _searchText = term;
        _filteredActivities = _activities.Where(a => 
            string.IsNullOrWhiteSpace(term) || 
            (a.Name?.Contains(term, StringComparison.InvariantCultureIgnoreCase) ?? false))
            .ToArray();
    }

    private async Task SetActivity(TimeActivity activity)
    {
        if (Entry != null && Day != null)
        {
            await AssignActivity(activity);
        }
    }

    private async Task AssignActivity(TimeActivity activity)
    {
        Entry.Activity = activity;
        Entry.Title = activity.Name;
        Entry.Color = activity.Color;
        await Committed.InvokeAsync();
    }

    private string? _searchText;

    private async Task New()
    {
        var activity = new TimeActivity{Color = new MudColor(0, 255, 0, 255).ToString(MudColorOutputFormats.HexA)};
        var parameters = new DialogParameters { { nameof(TimeActivityEditor.Activity), activity } };

        var options = new DialogOptions
        {
            CloseButton = true,
            DisableBackdropClick = true,
            MaxWidth = MaxWidth.Large,
            FullWidth = true,
            Position = DialogPosition.Center,
        };

        var d = _dialogService.Show<TimeActivityEditor>("New activity", parameters, options);
        var result = await d.Result;

        if (!result.Cancelled)
        {
            await _persistence.Save(activity);
            await AssignActivity(activity);
        }

    }

}
