@using MudBlazor;
@using MudBlazor.Utilities
@using TimeyWimey.Data
@using TimeyWimey.Infrastructure
@using TimeyWimey.Model
@inject IDialogService _dialogService;
@inject DataPersistence _persistence;
@inject EventAggregator _aggregator;

<MudMenu @ref="Menu">
    <ChildContent>
        <div class="d-flex flex-column">
            <div class="d-flex flex-row">
                <div class="d-flex flex-column">
                    <MudTextField Placeholder="Search" T="string" Value="_searchText" Style="padding-left: 6px"
                                  AdornmentIcon="@Icons.Filled.Search" DebounceInterval="500" 
                                  ValueChanged="(string term) => Search(term)"/>

                    <MudMenuItem OnClick="New">[New...]</MudMenuItem>
                    @if (Entry.Activity != null)
                    {
                        <MudMenuItem OnClick="Edit">[Edit @Entry.Activity.Name]</MudMenuItem>
                    }
                    @foreach (var activity in _filteredActivities!)
                    {
                        <MudMenuItem OnClick="async () => await SetActivity(activity)">@activity.Name</MudMenuItem>
                    }
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Secondary" OnClick="async () => await DeleteEntry(Entry!)"></MudIconButton>
                </div>
                <div class="d-flex flex-column">
                    <MudTextField @bind-Value="Entry.Title" Label="Title" @onkeypress="OnKeyPress"/>
                </div>
            </div>
            <div class="d-flex flex-row">
            </div>
        </div>
    </ChildContent>
</MudMenu>
@code {
    private MudMenu? Menu { get; set; }

    [Parameter]
    public TimeEntry? Entry { get; set; }

    [Parameter]
    public Day? Day { get; set; }

    [Parameter]
    public EventCallback Committed { get; set; }

    private TimeActivity[]? _filteredActivities;

    private TimeActivity[]? _activities;


    private string? _searchText;


    public async ValueTask Toggle(MouseEventArgs obj)
    {
        Menu!.PopoverStyle = $"margin-top: {obj.ClientY}px; margin-left: {obj.ClientX}px";
        _activities = await _persistence.GetActivities();
        _filteredActivities = _activities;
        Menu.ToggleMenu(obj);
    }

    private void Search(string term)
    {
        _searchText = term;
        _filteredActivities = _activities!.Where(a => 
            string.IsNullOrWhiteSpace(term) || 
            (a.Name?.Contains(term, StringComparison.InvariantCultureIgnoreCase) ?? false))
            .ToArray();
    }

    private async Task OnKeyPress(KeyboardEventArgs arg)
    {
        if (arg.Key == "Enter")
        {
            await Committed.InvokeAsync();
            await Toggle(new MouseEventArgs());
        }
    }

    private async Task SetActivity(TimeActivity activity)
    {
        if (Entry != null && Day != null)
        {
            await AssignActivity(activity);
        }
    }

    private async Task AssignActivity(TimeActivity activity)
    {
        Entry!.Activity = activity;
        Entry.Title = activity.Name;
        await Committed.InvokeAsync();
    }


    private async Task New()
    {
        var activity = new TimeActivity{Color = new MudColor(0, 255, 0, 255).ToString(MudColorOutputFormats.HexA)};
        await EditActivity(activity, "New activity");
    }

    private async Task Edit()
    {
        await EditActivity(Entry!.Activity!, "Edit activity");
        _aggregator.Publish(new TimeActivityUpdated(Entry.Activity!));
    }

    private async Task EditActivity(TimeActivity activity, string dialogTitle)
    {
        var parameters = new DialogParameters { { nameof(TimeActivityEditor.Activity), activity } };

        var options = new DialogOptions
        {
            CloseButton = true,
            DisableBackdropClick = false,
            MaxWidth = MaxWidth.Large,
            FullWidth = false,
            Position = DialogPosition.Center,
        };

        var d = _dialogService.Show<TimeActivityEditor>(dialogTitle, parameters, options);
        var result = await d.Result;

        if (!result.Cancelled)
        {
            await _persistence.Save(activity);
            await AssignActivity(activity);
        }
    }

    private async Task DeleteEntry(TimeEntry entry)
    {
        Day!.Entries.Remove(entry);
        await _persistence.Delete(entry);
        await Committed.InvokeAsync();
    }

}

}
