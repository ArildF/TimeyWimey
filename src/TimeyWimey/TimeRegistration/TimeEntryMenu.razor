@using MudBlazor;
@using TimeyWimey.Model
<MudMenu @ref="Menu">
    <ChildContent>
        <MudTextField Placeholder="Search" Value="_searchText" Style="padding-left: 6px"
                      AdornmentIcon="@Icons.Filled.Search" DebounceInterval="500" ValueChanged="(string term) => Search(term)"/>
        @foreach (var activity in _filteredActivities)
        {
            <MudMenuItem OnClick="async () => await Callback(activity)">@activity</MudMenuItem>
        }
    </ChildContent>
</MudMenu>
@code {
    private MudMenu Menu { get; set; }

    [Parameter]
    public TimeEntry? Entry { get; set; }

    [Parameter]
    public Day? Day { get; set; }

    [Parameter]
    public EventCallback Committed { get; set; }

    private string[]? _filteredActivities;

    private string[] _activities = new[] { "One activity", "Some other activity", "Simpsons", "Homers" };

    protected override Task OnInitializedAsync()
    {
        _filteredActivities = _activities;
        return base.OnInitializedAsync();
    }

    public void Toggle(MouseEventArgs obj)
    {
        Menu.PopoverStyle = $"margin-top: {obj.ClientY}px; margin-left: {obj.ClientX}px";
        Menu.ToggleMenu(obj);
    }

    private void Search(string term)
    {
        _searchText = term;
        _filteredActivities = _activities.Where(a => 
            string.IsNullOrWhiteSpace(term) || a.Contains(term, StringComparison.InvariantCultureIgnoreCase))
            .ToArray();
    }

    private async Task Callback(string activity)
    {
        if (Entry != null && Day != null)
        {
            Entry.Title = activity;
            await Committed.InvokeAsync();
        }
    }

    private string _searchText;

}
