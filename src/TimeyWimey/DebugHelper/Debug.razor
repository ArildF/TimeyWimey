@page "/Debug"
@inject IDbContextFactory<WimeyDataContext> _contextFactory
@inject IJSRuntime _js;
@inject DataPersistence _persistence;
@using MudBlazor;
@using TimeyWimey.Data
@using Microsoft.EntityFrameworkCore
@using System.Text
@using System.Data.Common
@using System.Text.Json
<h3>Debug</h3>
<MudButton OnClick="DumpDatabase">Dump database</MudButton>
<MudButton OnClick="DownloadDatabase">Download database file</MudButton>
<MudButton OnClick="StatDatabaseFile">Stat database file</MudButton>

<MudTextField T="string" Lines="4" @bind-Text="_sql" />
<MudButton OnClick="ExecuteSql">Execute SQL</MudButton>

@if (!string.IsNullOrEmpty(_result))
{
    <MudTextField T="string" Lines="80" Style="font-family: monospace" FullWidth="true" Text="@_result"/>
}

@code {

    private string? _result;

    private string? _sql;

    private async Task DumpDatabase()
    {
        var builder = new StringBuilder();
        await using var db = await _contextFactory.CreateDbContextAsync();
        await using var conn = db.Database.GetDbConnection();
        await conn.OpenAsync();

        await using var cmd = conn.CreateCommand();
        cmd.CommandText = "SELECT name FROM sqlite_master WHERE type='table'";
        await using var reader = await cmd.ExecuteReaderAsync();

        var tableNames = new List<string>();
        while (await reader.ReadAsync())
        {
            tableNames.Add(reader.GetString(0));
        }
        foreach (var tableName in tableNames)
        {
            await DumpTable(tableName, builder, conn);
        }

        _result = builder.ToString();
    }

    private async Task DumpTable(string tableName, StringBuilder builder, DbConnection conn)
    {
        builder.AppendLine($"[{tableName}]");
        await using var cmd = conn.CreateCommand();
        cmd.CommandText = $"SELECT * FROM {tableName}";
        await using var reader = await cmd.ExecuteReaderAsync();
        await DumpQueryResults(builder, reader);

        builder.AppendLine();
        builder.AppendLine();
    }

    private static async Task DumpQueryResults(StringBuilder builder, DbDataReader reader)
    {
        var schema = await reader.GetColumnSchemaAsync();
        var headers = schema.Select(s => s.ColumnName)
            .Select(s => $"{s,-25}");
        builder.AppendLine(String.Join("", headers));
        while (await reader.ReadAsync())
        {
            object[] values = new object[reader.VisibleFieldCount];
            reader.GetValues(values);
            var valueStrings = values.Select(
                v => $"{(v == DBNull.Value ? "<NULL>" : v.ToString()?.Trim())}")
                .Select(v => $"{v,-25}");
            builder.AppendLine(String.Join("", valueStrings));
        }
    }

    private async Task ExecuteSql()
    {
        var builder = new StringBuilder();

        await using var db = await _contextFactory.CreateDbContextAsync();
        await using var conn = db.Database.GetDbConnection();
        await conn.OpenAsync();

        var cmd = conn.CreateCommand();
        cmd.CommandText = _sql;
        try
        {
            await using var reader = await cmd.ExecuteReaderAsync();
            await DumpQueryResults(builder, reader);

            _result = builder.ToString();
        }
        catch (Exception e)
        {
            _result = e.ToString();
        }
    }

    private async Task DownloadDatabase()
    {
        byte[] bytes = await _persistence.GetDatabaseFileContents();
        var memStream = new MemoryStream(bytes);

        using var reference = new DotNetStreamReference(memStream);
        await _js.InvokeVoidAsync("downloadFileFromStream",
            Path.GetFileName(DataPersistence.DatabaseFilePath),
            reference);
    }

    private async Task StatDatabaseFile()
    {
        var stat = await _persistence.StatDatabaseFile();
        await using var memStream = new MemoryStream();
        var writer = new Utf8JsonWriter(memStream, new JsonWriterOptions{Indented = true});
        stat.WriteTo(writer);
        await writer.FlushAsync();

        _result = Encoding.UTF8.GetString(memStream.ToArray());
    }

}
