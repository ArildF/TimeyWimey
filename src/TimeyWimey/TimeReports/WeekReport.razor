@page "/WeekReport/{ForWeekOf}"
@using TimeyWimey.Data
@using System.Globalization
@using TimeyWimey.Infrastructure
@using MudBlazor;
@using TimeyWimey.Model
@using TimeyWimey.TimeRegistration

@inject DataPersistence _persistence;
@inject WeekReportGenerator _generator;
@inject IDialogService _dialogService;


@if (_reportsPerCodeSystem == null)
{
    return;
}

<style>
    table, th, td {
        border: 1px solid black;
        border-collapse: collapse;
        text-align: center;
    }
    .header {
        text-align: center;
        font-weight: bold;

    }
    ul {
        list-style: circle;
    }
</style>
@foreach (var report in _reportsPerCodeSystem)
{
    <h3>@report.CodeSystem</h3>
    <table style="min-width: 800px" class="mb-8">
        <thead>
            <tr>
                <th>Code</th>
                @foreach (var day in report.Days)
                {
                    <th class="header">
                        <div>@day.DayOfWeek</div> 
                        <div class="date">@day.Date.ToString("M")</div>
                    </th>
                }
                <th class="header">
                    Sum
                </th>
            </tr>
        </thead>
        <tbody>
        @{ bool alternate = false; }
        @foreach (var perCode in report.ReportPerCode)
        {
            <tr style="background: @(alternate ? "white" : "LightGray")">
                <td style="min-width: 80px; font-weight: bold">@perCode.Code</td>
                @foreach (var hour in perCode.Hours)
                {
                    <td>
                        @(hour > 0 
                                 ? hour.ToString(CultureInfo.CurrentUICulture)
                                 : "")
                    </td>
                }
                <td style="font-weight: bold">@perCode.Sum</td>
                @{ alternate = !alternate;}
            </tr>
        }
        <tr>
            <td style="font-weight: bold">Sum</td>
            @foreach (var total in report.DayTotals)
            {
                <td style="font-weight: bold">@total</td>
            }
            <td style="font-weight: bold">@(report.DayTotals.Sum())</td>
        </tr>
        </tbody>
    </table>

}
@if (_entriesWithNotes.EmptyIfNull().Any())
{
    <h5>Notes</h5>
    <div class="d-flex flex-column" style="gap: 1em">
        @foreach (var (day, timeEntry) in _entriesWithNotes.EmptyIfNull())
        {
            <article>
                <h6>
                    @day.Date @timeEntry.Start - @timeEntry.End
                    @timeEntry.Activity?.Name @timeEntry.Title
                </h6>
                <p>@timeEntry.Notes</p>
            </article>
        }
    </div>
}

@if (_entriesWithMissingCodeSystems.EmptyIfNull().Any())
{
    <h5>Entries with missing code systems</h5>
    @foreach (var cs in _entriesWithMissingCodeSystems!)
    {
        <h6>Missing @cs.Key</h6>
        <table style="min-width: 800px" class="mb-8">
            <thead>
            <tr>
                <th>Date</th>
                <th>Start</th>
                <th>End</th>
                <th>Activity</th>
                <th>Name</th>
                <th></th>
            </tr>
            </thead>
            <tbody>
            @foreach (var missing in cs)
            {
                <tr>
                    <td class="header">@missing.Day.Date.ToString("M")</td>
                    <td>@(missing.Entry.Start)</td>
                    <td>@(missing.Entry.End)</td>
                    <td>@missing.Entry.Activity?.Name</td>
                    <td>@missing.Entry.Title</td>

                    <td >
                        @if (missing.Entry.Activity == null)
                        {
                            <b>No activity</b>
                        }
                        else
                        {
                            <MudButton Variant="Variant.Filled"  OnClick="@(async () => await EditActivity(missing.Entry.Activity))">
                                Edit activity
                            </MudButton>
                        }
                    </td>
                </tr>
            }
            </tbody>
        </table>
    }
}


@code {
    [Parameter]
    public string? ForWeekOf { get; set; }

    private ReportPerCodeSystem[]? _reportsPerCodeSystem;
    private DayActivity[]? _entriesWithNotes;
    private IGrouping<string, MissingCodeSystem>[]? _entriesWithMissingCodeSystems;

    protected override async Task OnInitializedAsync()
    {
        await GenerateReport();
    }

    private async Task GenerateReport()
    {
        var dateTime = DateTime.Parse(ForWeekOf!);
        var date = DateOnly.FromDateTime(dateTime);
        _reportsPerCodeSystem = await _generator.GenerateForWeekOf(date);
        _entriesWithNotes = await _generator.GetNotesForWeekOf(date);

        _entriesWithMissingCodeSystems = (await _generator.GetEntriesWithMissingCodeSystems(date))
            .GroupBy(g => g.CodeSystem).ToArray();
    }

    private async Task EditActivity(TimeActivity activity)
    {
        var parameters = new DialogParameters { { nameof(TimeActivityEditor.Activity), activity } };

        var options = new DialogOptions
        {
            CloseButton = true,
            DisableBackdropClick = false,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            Position = DialogPosition.Center,
        };

        var d = _dialogService.Show<TimeActivityEditor>("Edit activity", parameters, options);
        var result = await d.Result;

        if (!result.Cancelled && (bool)result.Data)
        {
            await _persistence.Save(activity);
            await GenerateReport();
        }
    }

}
